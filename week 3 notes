
- Templates are files that define the presentation of a web app's data separately from the server logic. 

- In the context of TinyApp, that means they'll define the HTML of a particular page separately from the logic in the Express server.

- Why are templates helpful?
1. Keeping server logic (in this case JavaScript) separate from markup (HTML), making it easier to modify or debug one without affecting the other
2. Separating different parts of an HTML document into different files, helping keep the length of HTML files short and manageable

- you need a template engine to use template files. 
- The template engine replaces variables in a template file with actual data, and transforms the template into an HTML file sent to the client (that is, the browser)

#ESJ
- EJS automatically knows to look inside the views directory for any template files that have the extension .ejs
- This means we don't need to tell it where to find them. 
- It also means that we do not need to include the extension of the filename when referencing it.

- When sending variables to an EJS template, we need to send them inside an object, even if we are only sending one variable. 
- This is so we can use the key of that variable (in the above case the key is urls) to access the data within our template.

- By using the `<%= %>` syntax, we tell EJS that we want the result of this code to show up on our page.
- if we would like to run some code without it displaying on the page, then we can use the slightly different syntax of `<% %>`

- For example, if we only wanted to show our greeting if it has a value, then we could do something like this:
<!-- This line will not show up on the page -->
`<% if(greeting) {%>
  <!-- This line will only show if greeting is truthy -->
  <h1><%= greeting %></h1>
<% }%>`